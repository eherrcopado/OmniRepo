<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>62.0</apiVersion>
    <constants>
        <description>Stores data for the action when the field service technician enters the appointment location.</description>
        <name>ActionDataForEntry</name>
        <dataType>String</dataType>
        <value>
            <stringValue>{&quot;quickAction&quot;:&quot;ServiceAppointment.Create_TSE_SA_Entry&quot;}</stringValue>
        </value>
    </constants>
    <constants>
        <description>Stores data for the action when the field service technicians exits the appointment location.</description>
        <name>ActionDataForExit</name>
        <dataType>String</dataType>
        <value>
            <stringValue>{&quot;quickAction&quot;:&quot;ServiceAppointment.Create_TSE_SA_Exit&quot;}</stringValue>
        </value>
    </constants>
    <constants>
        <description>Stores the radius value of the geolocation-based action.</description>
        <name>Radius</name>
        <dataType>Number</dataType>
        <value>
            <numberValue>100.0</numberValue>
        </value>
    </constants>
    <decisions>
        <description>Determines whether the geolocation based action record from Get Geolocation Based Action exists.</description>
        <name>HaveGeolocationBasedAction</name>
        <label>Have Geolocation Based Action?`</label>
        <locationX>182</locationX>
        <locationY>431</locationY>
        <defaultConnectorLabel>Yes (Default)</defaultConnectorLabel>
        <rules>
            <name>DoesNotHasGeolocationBasedAction</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetGeolocationBasedAction</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>CreateGeolocationBasedActionOnEntry</targetReference>
            </connector>
            <label>No</label>
        </rules>
    </decisions>
    <description>Creates an action record using geolocation when a field service technician enters or exits from a service appointment location.</description>
    <environments>Default</environments>
    <interviewLabel>Create Action Records Based on Geolocation {!$Flow.CurrentDateTime}</interviewLabel>
    <label>Create Action Records Based on Geolocation</label>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>AUTO_LAYOUT_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>AutoLaunchedFlow</processType>
    <recordCreates>
        <description>Creates a geolocation based action record with the action data set to the constant ActionDataForEntry, the action type set to QuickAction, the name set to “DriveTime | Entering &lt;AppointmentNumber&gt;”, radius set to the constant Radius, reference record ID set to the service appointment ID passed into the flow, and the trigger type set to GeoFenceEnter.</description>
        <name>CreateGeolocationBasedActionOnEntry</name>
        <label>Create Geolocation Based Action on Entry</label>
        <locationX>50</locationX>
        <locationY>539</locationY>
        <connector>
            <targetReference>CreateGeolocationBasedActionOnExit</targetReference>
        </connector>
        <inputAssignments>
            <field>ActionData</field>
            <value>
                <elementReference>ActionDataForEntry</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>ActionType</field>
            <value>
                <stringValue>QuickAction</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Name</field>
            <value>
                <stringValue>DriveTime | Entering {!$Record.AppointmentNumber} </stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Radius</field>
            <value>
                <elementReference>Radius</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>ReferenceRecordId</field>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>TriggerType</field>
            <value>
                <stringValue>GeoFenceEnter</stringValue>
            </value>
        </inputAssignments>
        <object>GeolocationBasedAction</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordCreates>
    <recordCreates>
        <description>Creates a geolocation based action record with the action data set to the constant ActionDataForExit, the action type set to QuickAction, the name set to “DriveTime | Exiting &lt;AppointmentNumber&gt;”, radius set to the constant Radius, reference record ID set to the service appointment ID passed into the flow, and the trigger type set to GeoFenceExit.</description>
        <name>CreateGeolocationBasedActionOnExit</name>
        <label>Create Geolocation Based Action on Exit</label>
        <locationX>50</locationX>
        <locationY>647</locationY>
        <inputAssignments>
            <field>ActionData</field>
            <value>
                <elementReference>ActionDataForExit</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>ActionType</field>
            <value>
                <stringValue>QuickAction</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Name</field>
            <value>
                <stringValue>DriveTime | Exiting {!$Record.AppointmentNumber} </stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Radius</field>
            <value>
                <elementReference>Radius</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>ReferenceRecordId</field>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>TriggerType</field>
            <value>
                <stringValue>GeoFenceExit</stringValue>
            </value>
        </inputAssignments>
        <object>GeolocationBasedAction</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordCreates>
    <recordLookups>
        <description>Gets the geolocation based action record with a reference record ID that matches the service appointment ID passed into the flow. Stores the result in the Get Geolocation Based Action record variable.</description>
        <name>GetGeolocationBasedAction</name>
        <label>Get Geolocation Based Action</label>
        <locationX>182</locationX>
        <locationY>323</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>HaveGeolocationBasedAction</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>ReferenceRecordId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </filters>
        <filters>
            <field>Name</field>
            <operator>Contains</operator>
            <value>
                <stringValue>DriveTime</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>GeolocationBasedAction</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <start>
        <locationX>56</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>GetGeolocationBasedAction</targetReference>
        </connector>
        <doesRequireRecordChangedToMeetCriteria>true</doesRequireRecordChangedToMeetCriteria>
        <filterLogic>or</filterLogic>
        <filters>
            <field>Street</field>
            <operator>IsNull</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </filters>
        <filters>
            <field>PostalCode</field>
            <operator>IsNull</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </filters>
        <object>ServiceAppointment</object>
        <recordTriggerType>CreateAndUpdate</recordTriggerType>
        <triggerType>RecordAfterSave</triggerType>
    </start>
    <status>Obsolete</status>
</Flow>
